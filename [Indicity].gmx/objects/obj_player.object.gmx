<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player init
randomize()
global.color=make_colour_rgb(random(255),random(255),random(255))
mass=48
look=1
global.look=1
mspd=1
global.stun=false
global.root=false
global.sub=0
jump=false
sprite_normal=spr_player
sprite_jump=spr_player_jump

interact_object = noone;
interaction_started = false;
interaction_finished = true;

//grav
z=0
zspeed=0
zgravity=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create shadow
instance_create(x,y,obj_player_shadow)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///slow
global.slow=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blind
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///silence
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///root
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stun
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///grav init and look
y-=zspeed

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stats and level up

//dont empty stats
if global.hp&gt;global.mhp {global.hp=global.mhp}
if global.sp&gt;global.msp {global.sp=global.msp}

if global.hp&lt;0 {global.hp=0} //Die
if global.sp&lt;0 {global.sp=0}

//level up
if (global.xp&gt;= global.mxp and global.lvl&lt;99)
{
    global.xp -= global.mxp;
    global.lvl += 1;
    global.mxp += global.lvl*5;
    instance_create(x,y,obj_levelup);
    //update stats
    stats_update();
}

if (global.lvl=99) global.xp=0;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player movement/animation

///look
if (interact_object == noone &amp;&amp; (global.attack=0 or global.attack=-2))
{
if mouse_x&lt;obj_player.x {look=-1}
if mouse_x&gt;obj_player.x {look= 1}
}

//this will be the player movement
//player movement
if alarm[0]&lt;0 and alarm[1]&lt;0 and global.stun=false and global.root=false
{
    if(!global.hyChatActive /*&amp;&amp; !obj_inventory.active*/)
    {
        if keyboard_check(global.key1up)   and !keyboard_check(global.key1down) {if (place_free(x,y-(global.movespeed/2)-1) and jump=false and !place_meeting(obj_player_shadow.x,obj_player_shadow.y-(global.movespeed/2)-1,obj_wall)) or (jump=true and !place_meeting(obj_player_shadow.x,obj_player_shadow.y-(global.movespeed/2)-1,obj_wall)) {y-=((global.movespeed/2)) mspd=(global.movespeed/2)}}
        if keyboard_check(global.key1down) and !keyboard_check(global.key1up)   {if (place_free(x,y+(global.movespeed/2)) and jump=false and !place_meeting(obj_player_shadow.x,obj_player_shadow.y+(global.movespeed/2),obj_wall)) or (jump=true and !place_meeting(obj_player_shadow.x,obj_player_shadow.y+(global.movespeed/2),obj_wall)) {y+=((global.movespeed/2)) mspd=(global.movespeed/2)}}
        if keyboard_check(global.key1right)and !keyboard_check(global.key1left) {if ((place_free(x+(global.movespeed+24),y) and jump=false) and  !place_meeting(x+(global.movespeed),y,obj_wall)) or (jump=true and !place_meeting(obj_player_shadow.x+(global.movespeed),obj_player_shadow.y,obj_wall)) {if look=1 {x+=global.movespeed; mspd=global.movespeed} else {x+=global.movespeed/1.2 mspd=global.movespeed}}}
        if keyboard_check(global.key1left) and !keyboard_check(global.key1right){if ((place_free(x-(global.movespeed+24),y) and jump=false) and  !place_meeting(x-(global.movespeed),y,obj_wall)) or (jump=true and !place_meeting(obj_player_shadow.x-(global.movespeed),obj_player_shadow.y,obj_wall)) {if look=1 {x-=global.movespeed/1.2; mspd=global.movespeed} else {x-=global.movespeed mspd=global.movespeed}}}
        if keyboard_check_pressed(global.key1jump) and (global.attack=0 or global.attack=-2) {if zspeed=0 and zgravity=0 {y-=5  zspeed=5;zgravity=.25 audio_play_sound(jump_5,0,0) hyComEmit("USER", "ANIMATION", "0"); interact_object = noone}}
    }
}
//image mirror and image sub_image
if jump=false{ if global.attack=0 {if look=1 {image_xscale=1 global.look=1} else {image_xscale=-1 global.look=-1}}}
global.sub=floor(image_index)
if zgravity=0 {jump=false sprite_index=sprite_normal} else {jump=true sprite_index=sprite_jump}

//image speed
if  !keyboard_check(global.key1right)
and !keyboard_check(global.key1left)
and !keyboard_check(global.key1up)
and !keyboard_check(global.key1down)
{
 image_speed=0.02
}
 else
{
 image_speed=(mspd/8)
 interact_object = noone;
}

///grav init
z+=zspeed
zspeed-=zgravity
if z&lt;1
{
 z=0
 zspeed=0
 zgravity=0
}

//image stop
if alarm[0]&gt;0 or alarm[1]&gt;0
{
 image_speed=0
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interacting

// Stop when attacking or blocking
if (mouse_check_button(global.key1attack) || mouse_check_button(global.key1defend))
{    
    interact_object = noone;
    interaction_started = false;
    interaction_finished = false;
}

// Get interactable objects in range
var interact_in_range = false;
with(obj_interactable)
{
    // Add to list if player is in range
    var distX = point_distance(x, y, obj_player_shadow.x, y);
    var distY = point_distance(x, y, x, obj_player_shadow.y);
    if (active &amp;&amp; distX &lt; range &amp;&amp; distY &lt; range/2)
        interact_in_range[array_length_1d(interact_in_range)] = id;
}

// Pick closest from list
var nearest_obj = noone;
if (array_length_1d(interact_in_range) &gt; 0)
{
    var nearest_obj_dist = 0;
    for (var i = 0; i &lt; array_length_1d(interact_in_range); i++)
    {
        var temp_dist = point_distance(x, y, interact_in_range[i].x, interact_in_range[i].y);
        if (nearest_obj == noone)
        {
            nearest_obj = interact_in_range[i];
            nearest_obj_dist = temp_dist;
        }
        else
        {
            if (temp_dist &lt; nearest_obj_dist)
            {
                nearest_obj = interact_in_range[i];
                nearest_obj_dist = temp_dist;
            }
        }
    }
}

// Reset glow
obj_interactable.in_range = false;

if (nearest_obj != noone)
{
    // Set glow
    nearest_obj.in_range = true;
    
    // Change interacting object
    if (!mouse_check_button(global.key1attack) &amp;&amp; !mouse_check_button(global.key1defend) &amp;&amp; !obj_inventory.active &amp;&amp; jump != 1 &amp;&amp; interact_object == noone &amp;&amp; nearest_obj != noone &amp;&amp; keyboard_check(global.key1interact))
    {
        // Reset interaction status
        interaction_started = false;
        interaction_finished = false;
    
        // Sheat weapons
        if (instance_exists(obj_greatsword)) obj_greatsword.sheat = true;
        if (instance_exists(obj_axe)) obj_axe.sheat = true;
        if (instance_exists(obj_scythe)) obj_scythe.sheat = true;
    
        // Set object as target
        interact_object = nearest_obj;
        
        // Find goal
        if (obj_player_shadow.x &gt; interact_object.x)
            interact_side = 1;
        else
            interact_side = -1;
        interactGoalX = interact_object.x + (interact_object.interact_range * interact_side) + interact_object.offsetX;
        interactGoalY = interact_object.y + interact_object.offsetY;
    }
}

if (interact_object != noone)
{
    // Look
    if (interact_object.x &lt; x)
        look = -1;
    else
        look = 1;

    // Move towards goal
    if (point_distance(obj_player_shadow.x, obj_player_shadow.y, interactGoalX, interactGoalY) &gt; mspd)
    {        
        // Move
        var interactGoalDir = point_direction(obj_player_shadow.x, obj_player_shadow.y, interactGoalX, interactGoalY);
        x += lengthdir_x(mspd, interactGoalDir);
        y += lengthdir_y(mspd/2, interactGoalDir);
    }
    else
    {
        // Jump to goal position
        x = interactGoalX;
        y = interactGoalY;
        
        // Start interaction
        if (interaction_started == false)
        {
            with (interact_object)
                event_user(0);
            interaction_started = true;
            interaction_finished = false;
        }
    }
    
    // Stop interaction
    if (interaction_finished)
    {
        interact_object = noone;
        interaction_started = false;
        interaction_finished = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///depth
if jump=false
{
 depth=(1*-(y+12))
}
 else
{
 depth=obj_player_shadow.depth-1000
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Hit</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///online
if(x!=xprevious or y!=yprevious){
    hyComEmit("USER", "DATA", string(x), string(y));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///advanced_collision()
if jump=false
{
 var a,xoff,yoff,om,mm,mag;
  
 a = point_direction(x, y+12, other.x, other.y);    //Get the direction from the colliding object
 xoff = lengthdir_x(1, a);                       //Get the offset vector
 yoff = lengthdir_y(1, a);
 om = other.mass / mass;                         //start the fake "physics mass" calculations
 mm = mass / other.mass;
 mag = sqrt((om * om) + (mm * mm));
 om /= mag;
 mm /= mag;

 //Move out of collision
 while (place_meeting(x, y, other))
 {
 x -= xoff * om; //Move the instance out of collision
 y -= yoff * om;
 other.x += xoff * mm; //Move the other instance out of the collision
 other.y += yoff * mm; 
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
//draw_text_colour(x+32,y,global.xp,c_white,c_white,c_white,c_white,1)
//draw_text_colour(x-32,y,global.mhp,c_white,c_white,c_white,c_white,1)
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,global.color,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="107">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///increase level
global.xp=global.mxp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
