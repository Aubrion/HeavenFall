<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///advanced_collision()
 var a,xoff,yoff,om,mm,mag;
  
 a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
 xoff = lengthdir_x(1, a);                       //Get the offset vector
 yoff = lengthdir_y(1, a);
 om = other.mass / mass;                         //start the fake "physics mass" calculations
 mm = mass / other.mass;
 mag = sqrt((om * om) + (mm * mm));
 om /= mag;
 mm /= mag;
 if other.x&lt;x {x-=om other.x+=mm} else {x+=om other.x-=mm}
 if other.y+12&lt;y {y-=om other.y+=mm} else {y+=om other.y-=mm}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_parent_2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///advanced_collision()
 var a,xoff,yoff,om,mm,mag;
  
 a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
 xoff = lengthdir_x(1, a);                       //Get the offset vector
 yoff = lengthdir_y(1, a);
 om = other.mass / mass;                         //start the fake "physics mass" calculations
 mm = mass / other.mass;
 mag = sqrt((om * om) + (mm * mm));
 om /= mag;
 mm /= mag;

while (place_meeting(x, y, other))
{
 if other.x&lt;x {x-=om other.x+=mm} else {x+=om other.x-=mm}
 if other.y&lt;y {y-=om other.y+=mm} else {y+=om other.y-=mm}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
