<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_back_inv</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inv_create();
inv_freeslot_create(6,52,84,120);

inv_slot_add(24,24,"main");
inv_slot_add(8,8,"tool");
inv_slot_add(8,24,"jewel");
inv_slot_add(40,8,"helm");
inv_slot_add(40,24,"jewel");
inv_slot_add(56,24,"off");
inv_slot_add(72,8,"jewel");
inv_slot_add(72,24,"jewel");

inv_freeslot_item_add(2,40,60,60);

inv_freeslot_item_add(0,8,8,1);
inv_freeslot_item_add(4,24,8,1);
inv_freeslot_item_add(3,8,24,1);
inv_freeslot_item_add(1,24,24,1);
inv_freeslot_item_add(5,40,8,1);
inv_freeslot_item_add(6,40,40,1);

//vars

active = -1;
m_slotID = -1;
m_slotStack = 0;
m_oldSlotT = 0;
m_oldSlot = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0] + view_wview[0] - ((sprite_width/2)+100);
y = view_yview[0] + view_hview[0]/2 - sprite_height/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('I')))
{
    active = -active;
}

//drag and drop

if (mouse_check_button_pressed(mb_left) &amp;&amp; m_slotID == -1)
{
    for (i=0; i&lt;slots; i+=1)
    {
        if (slotStack[i] != 0 &amp;&amp; point_in_rectangle(mouse_x,mouse_y,x+slotX[i],y+slotY[i],x+slotX[i]+16,y+slotY[i]+16))
        {
            m_slotID = slotID[i];
            m_slotStack = slotStack[i];
            m_oldSlotT = 0;
            m_oldSlot = i;
            slotID[i] = -1;
            slotStack[i] = 0;
            it_gear_change();
            break;
        }       
    }
    
    for (i=0; i&lt;fs_slots; i+=1)
    {
        if (fs_slotStack[i] != 0 &amp;&amp; point_in_rectangle(mouse_x,mouse_y,x+fs_x+fs_slotX[i],y+fs_y+fs_slotY[i],x+fs_x+fs_slotX[i]+sprite_get_width(ITEM.item[fs_slotID[i],2]),y+fs_y+fs_slotY[i]+sprite_get_height(ITEM.item[fs_slotID[i],2])))
        {
            m_slotID = fs_slotID[i];
            m_slotStack = fs_slotStack[i];
            m_oldSlotT = 1;
            m_oldSlot = i;
            fs_slotID[i] = -1;
            fs_slotStack[i] = 0;
            break;
        }       
    }
}
else if (mouse_check_button_released(mb_left) &amp;&amp; m_slotID != -1)
{
    for (i=0; i&lt;slots; i+=1)
    {
        if (slotStack[i] == 0 &amp;&amp; point_in_rectangle(mouse_x,mouse_y,x+slotX[i],y+slotY[i],x+slotX[i]+16,y+slotY[i]+16))
        {            
            // Tool slot accepts all tools
            var tool_accepted = (
                slotType[i] == "tool" &amp;&amp; (
                ITEM.item[m_slotID, 1] == "pickaxe" ||
                ITEM.item[m_slotID, 1] == "woodcutting_axe"
            ));
        
            if (tool_accepted || ITEM.item[m_slotID, 1] == slotType[i])
            {
                slotID[i] = m_slotID;
                slotStack[i] = m_slotStack;
                m_slotID = -1;
                m_slotStack = 0;
                it_gear_change();
                break;
            }
        }       
    }
    
    for (i=0; i&lt;fs_slots; i+=1)
    {
        if (fs_slotID[i] != -1 &amp;&amp; fs_slotID[i] == m_slotID &amp;&amp; point_in_rectangle(mouse_x,mouse_y,x+fs_x+fs_slotX[i],y+fs_y+fs_slotY[i],x+fs_x+fs_slotX[i]+sprite_get_width(ITEM.item[fs_slotID[i],2]),y+fs_y+fs_slotY[i]+sprite_get_height(ITEM.item[fs_slotID[i],2])))
        {
            if (fs_slotStack[i]+m_slotStack &gt;= ITEM.item[fs_slotID[i],4])
            {
                m_slotStack -= ITEM.item[fs_slotID[i],4] - fs_slotStack[i];
                fs_slotStack[i] = ITEM.item[fs_slotID[i],4];
                break;
            }
            else
            {
                fs_slotStack[i] += m_slotStack;
                m_slotID = -1;
                m_slotStack = 0;
                break;
            }
        }       
    }
    
    if (m_slotID != -1 &amp;&amp; point_in_rectangle(mouse_x,mouse_y,x+fs_x,y+fs_y,x+fs_x+fs_w,y+fs_y+fs_h))
    {
        inv_freeslot_item_add(m_slotID,mouse_x-sprite_get_width(ITEM.item[m_slotID,2])/2-fs_x-x,mouse_y-sprite_get_height(ITEM.item[m_slotID,2])/2-fs_y-y,m_slotStack);
        m_slotID = -1;
        m_slotStack = 0;
    }
    
    if (m_slotID != -1)
    {
        if (m_oldSlotT == 0)
        {
            slotID[m_oldSlot] = m_slotID;
            slotStack[m_oldSlot] = m_slotStack;
            m_slotID = -1;
            m_slotStack = 0;
        }
        else if (m_oldSlotT == 1)
        {
            fs_slotID[m_oldSlot] = m_slotID;
            fs_slotStack[m_oldSlot] = m_slotStack;
            m_slotID = -1;
            m_slotStack = 0;
        }
    }
}

inv_freeslot_remove_empty();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active)
{
    inv_draw();
    if (m_slotID != -1)
    {
        draw_sprite(ITEM.item[m_slotID,2],0,mouse_x-sprite_get_width(ITEM.item[m_slotID,2])/2+sprite_get_xoffset(ITEM.item[m_slotID,2]),mouse_y-sprite_get_height(ITEM.item[m_slotID,2])/2+sprite_get_yoffset(ITEM.item[m_slotID,2]));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>74,74</point>
  </PhysicsShapePoints>
</object>
