<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>n_woodsman_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>n_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stats and image
range=10
still=n_woodsman_still
walking=n_woodsman_walk
attacking=n_woodsman_attack
death=n_woodsman_death
attacksound=roar_1
expgained=5
name="LV.3"
mhp=30
hp=mhp
msp=30
sp=msp
level=3
str=1
def=1
agi=1
int=1
will=1
mspeed=0.8
damage=4
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
attack=0
attacked=false
starty=y
startx=x
mass=sprite_height+sprite_width
i=instance_create(x,y,obj_shadow)
i.creator=id

image_xscale=choose(1,-1)
image_index=floor(random(20))
xx=x
yy=y

state = "idle";

// Wandering
wander_interval_min = room_speed * 3;
wander_interval_max = room_speed * 10;
wander_distance_min = 10;
wander_distance_max = 25;
wander_goalX = x;
wander_goalY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///moving
yy=y
xx=x
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start wandering
var wander_dir, wander_dist;

if (point_in_territorium(x, y, territorium))
{
    // Find location
    do {
        wander_dir = irandom(360);
        wander_dist = irandom_range(wander_distance_min, wander_distance_max);
        wander_goalX = x + lengthdir_x(wander_dist, wander_dir);
        wander_goalY = y + lengthdir_y(wander_dist, wander_dir);
    }
    until (point_in_territorium(wander_goalX, wander_goalY, territorium));
    
    // Change state
    state = "wander";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start animation
image_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset attacked and hp minimum
if global.attack=0 {attacked=false}
if hp&lt;=0 {hp=0}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// depth
depth = 1 * -(y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change to dead state
if (state != "dead" &amp;&amp; hp &lt;= 0)
{
    global.xp+=expgained
    state = "dead";
    sprite_index = death;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI Calculations
var distanceToPlayerX = abs(point_distance(x, y, obj_player_shadow.x, y));
var distanceToPlayerY = abs(point_distance(x, y, x, obj_player_shadow.y+12));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle state
if (state == "idle")
{
    // Check if player is in range
    if (distanceToPlayerX &lt; 125 &amp;&amp; distanceToPlayerY &lt; 40)
        state = "follow";
    
    // Set wander timer
    else if (alarm[1] == -1)
        alarm[1] = irandom_range(wander_interval_min, wander_interval_max);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wander state

if (state == "wander")
{
    // Arrived at destination
    if (point_distance(x, y, wander_goalX, wander_goalY) &lt; mspeed)
    {
        x = wander_goalX;
        y = wander_goalY;
        state = "idle";
    }
    
    // Move to goal
    else
    {
        // Face direction
        if (wander_goalX &lt; x)
            image_xscale = -1;
        else
            image_xscale = 1;
    
        // Move
        var wander_direction = point_direction(x, y, wander_goalX, wander_goalY);
        x += lengthdir_x(mspeed, wander_direction);
        y += lengthdir_y(mspeed, wander_direction);
    }
}

// Stop wander timer
if (state != "idle" &amp;&amp; alarm[1] &gt; -1)
    alarm[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow state
if (state == "follow")
{
    // Go idle if player is not in range
    if (distanceToPlayerX &gt; 150 || distanceToPlayerY &gt; 40)
        state = "idle";
    
    // Move towards player
    else
    {
        // Find goal location
        if (obj_player_shadow.x &lt; x)
            goalX = obj_player_shadow.x + 24;
        else
            goalX = obj_player_shadow.x - 24;
        var goalY = obj_player_shadow.y + 12;
        
        // Face player
        if (obj_player_shadow.x &lt; x)
            image_xscale = -1;
        else
            image_xscale = 1;
        
        // Move
        if (point_distance(x, y, goalX, goalY) &gt; mspeed)
        {
            var directionToGoal = point_direction(x, y, goalX, goalY);
            x = x + lengthdir_x(mspeed, directionToGoal);
            y = y + lengthdir_y(mspeed/2, directionToGoal);
        }
        
        // Attack
        else
        {
            state = "attack";
            sprite_index = attacking;
            image_index = 0;
            image_speed = 0;
            alarm[0] = room_speed * 0.25;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack state

if (state == "attack")
{
    // Check for attack frame
    if (image_index == 15)
    {
        play_sound(attacksound) 
    }
    if (image_index == 20)
    {
        // If player is in reach
        if (distanceToPlayerX &lt; 50 &amp;&amp; distanceToPlayerY &lt; 12)
            n_attacking(punch_1,swordhit_2);
    }
    
    // Check if animation is finished
    if (image_index == (sprite_get_number(sprite_index)-1))
        state = "idle";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dead state
if (state == "dead")
{
    if (sprite_index != n_woodsman_death)
        sprite_index = n_woodsman_death;
    if (image_index == sprite_get_number(death)-1)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attacked
if (state != "dead")
    attacked_weapons()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///moving
if (state != "dead")
{
    if (state != "attack")
    {
        if xx=x and yy=y
        {
            sprite_index=still
        }
        else
        {
            sprite_index=walking
            if alarm[11]=-1 {alarm[11]=10}
        }
    }
    else
    {
        alarm[11]=-1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move out collision
if (state!="dead")
{
 var a,xoff,yoff,om,mm,mag;
 
 a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
 xoff = lengthdir_x(1, a);                       //Get the offset vector
 yoff = lengthdir_y(1, a);
 om = other.mass / mass;                         //start the fake "physics mass" calculations
 mm = mass / other.mass;
 mag = sqrt((om * om) + (mm * mm));
 om /= mag;
 mm /= mag;
 
 //Move out of collision
 while (place_meeting(x, y, other))
 {
 x -= xoff * om; //Move the instance out of collision
 y -= yoff * om;
 other.x += xoff * mm; //Move the other instance out of the collision
 other.y += yoff * mm;
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self and information
draw_self()

// Draw Healthbar
if (state != "dead")
    draw_bar(x-(sprite_width/2),y-22,sprite_width,1,hp,mhp,c_red)

draw_set_font(global.normalfont)
draw_set_halign(fa_middle)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
