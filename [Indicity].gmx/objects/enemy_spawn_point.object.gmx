<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spawn_point_icon</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Settings
/// Change these in the creation code for different effect

// Size of the area (total, not radius)
area_height = 75;
area_width = 150;

// How long they keep following the player after he has left the territorium
defend_time = room_speed * 5;

// Enemy type
enemy_type = noone;

// Max enemies (will not spawn more when reached)
enemy_max = 15;

// Enable or disable respawning
respawning = true;

// Enemy respawn times
respawn_time_min = room_speed * 3;
respawn_time_max = room_speed * 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

initialised = false;
defending = false;

// Init enemy array (in counts a an empty array now)
enemies = false;

// Start respawn timer
if (respawning)
    alarm[0] = irandom_range(respawn_time_min, respawn_time_max);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change defending enemies to waiting

for (var i = 0; i &lt; array_length_1d(enemies); i++)
{
    var n = enemies[i];
    
    // Skip killed enemies
    if (!instance_exists(n))
        continue;
    
    // If defending, change to waiting state
    if (n.state == "defend")
    {
        n.state = "waiting";
        n.alarm[2] = n.wait_time;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn one new enemy
if (respawning)
{
    // Check array for dead enemies
    for (var i = 0; i &lt; array_length_1d(enemies); i++)
    {
        if (!instance_exists(enemies[i]))
        {
            spawn_enemy(id, i);
            break;
        }
    }
    
    // Reset alarm
    alarm[0] = irandom_range(respawn_time_min, respawn_time_max);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// First spawn

if (!initialised)
{
    var spawnX, spawnY, enemy_instance;
    
    // Error if enemy type is not set
    if (enemy_type == noone)
        show_message("No enemy type set for enemy_spawn_point " + string(id));
    
    // Create the enemies
    else
    {
        for (var i = 0; i &lt; enemy_max; i++)
            spawn_enemy(id, i);
    }
    
    // Do not init again
    initialised = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Defend territory

if (point_in_territorium(obj_player_shadow.x, obj_player_shadow.y, id))
{
    defending = true;

    // Give all enemies inside territorium agro
    for (var i = 0; i &lt; array_length_1d(enemies); i++)
    {
        var n = enemies[i];
        
        // Skip killed enemies
        if (!instance_exists(n))
            continue;
        
        // If inside territorium, change to defend state
        if (point_in_territorium(n.x, n.y, id))
            n.state = "defend";
    }
}
else
{
    if (defending &amp;&amp; alarm[1] == -1)
    {
        defending = false;
        alarm[1] = defend_time;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
